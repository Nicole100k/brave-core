diff --git a/content/browser/renderer_host/navigation_controller_impl.cc b/content/browser/renderer_host/navigation_controller_impl.cc
index ca48d1019d7f8feef5f0ecb3507c664822f99d2a..738c242d83ad419fef4a6b01a15105c9b38d868a 100644
--- a/content/browser/renderer_host/navigation_controller_impl.cc
+++ b/content/browser/renderer_host/navigation_controller_impl.cc
@@ -3444,16 +3444,17 @@ base::WeakPtr<NavigationHandle> NavigationControllerImpl::NavigateWithoutEntry(
   // Note: we intentionally leave the pending entry in place for renderer debug
   // URLs, unlike the cases below where we clear it if the navigation doesn't
   // proceed.
-  if (blink::IsRendererDebugURL(params.url)) {
+  const GURL url = params.url.SchemeIs(url::kJavaScriptScheme) ? params.url : pending_entry_->GetURL();
+  if (blink::IsRendererDebugURL(url)) {
     // Renderer-debug URLs won't go through NavigationThrottlers so we have to
     // check them explicitly. See bug 913334.
     if (GetContentClient()->browser()->ShouldBlockRendererDebugURL(
-            params.url, browser_context_)) {
+            url, browser_context_)) {
       DiscardPendingEntry(false);
       return nullptr;
     }
 
-    HandleRendererDebugURL(node, params.url);
+    HandleRendererDebugURL(node, url);
     return nullptr;
   }
 
@@ -3733,6 +3734,7 @@ NavigationControllerImpl::CreateNavigationRequestFromLoadParams(
     CHECK(!frame_entry || url_to_load == frame_entry->url());
   }
 
+  BRAVE_NAVIGATION_CONTROLLER_IMPL_CREATE_NAVIGATION_REQUEST_FROM_LOAD_PARAMS
   if (node->render_manager()->is_attaching_inner_delegate()) {
     // Avoid starting any new navigations since this node is now preparing for
     // attaching an inner delegate.
